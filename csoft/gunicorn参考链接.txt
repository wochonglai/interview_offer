https://www.jianshu.com/p/1e5feccb37d9 Python Web——Gunicorn 源码解析 - 简书
Python中socket经ssl加密后server开多线程 - 你说我记 - 博客园  https://www.cnblogs.com/lzqrkn/p/10737154.html
python3 socket ssl_如何通过Python3和ssl实现加密通信功能 https://blog.csdn.net/weixin_39827905/article/details/110904487
记一次 gunicorn 启动 flask 出问题的经历 - 华腾海神 - 博客园 https://www.cnblogs.com/haiton/p/11295495.html

Switch to use SSLContext · Issue #1140 · benoitc/gunicorn · GitHub https://github.com/benoitc/gunicorn/issues/1140
Can't load any Diffie-Hellman ciphers. · Issue #1810 · benoitc/gunicorn · GitHub https://github.com/benoitc/gunicorn/issues/1810

I managed to make this work , but I had to rewrite workers/sync.py
 and make the ssl.wrap_socket a SSLContext.wrap_socket , though this is test..
 what I ended up doing was generating a dhparam via openssl and loading it via context.load_dh_params

    def handle(self, listener, client, addr):
        req = None
        try:
            if self.cfg.is_ssl:
                context = ssl.SSLContext(ssl.PROTOCOL_TLSv1_2)
                context.options |= ssl.OP_SINGLE_DH_USE
                context.set_ciphers(self.cfg.ssl_options.get('ciphers'))
                context.load_cert_chain(self.cfg.ssl_options.get('certfile'), keyfile=self.cfg.ssl_options.get('keyfile'))
                context.load_verify_locations(cafile=self.cfg.ssl_options.get('ca_certs'))
                context.load_dh_params('ssl_cert/dhparam.crt')
                client = context.wrap_socket(client, server_side=True, do_handshake_on_connect=False)


https://docs.gunicorn.org/en/stable/settings.html
 --ssl-version TLSV1_2
 --cipher “password”

 折中方法：
 sudo /path/to/gunicorn --certfile server.crt --keyfile server.key --user nobody --group nogroup echo:app


Does Gunicorn --keyfile support encrypted private keys? #2410
 https://github.com/benoitc/gunicorn/issues/2410

Similarly with gevent I see that it can be run from a Python-script entry point and take an ssl context param, e.g.:
    from gevent.pywsgi import WSGIServer
    from gevent.ssl import SSLContext

    context = SSLContext()
    context.load_verify_locations(cafile=CA_FILE)
    context.load_cert_chain(certfile=CERT_FILE, keyfile=KEY_FILE, password=PASSPHRASE)

    http_server = WSGIServer(..., ssl_context=context)

https://www.cnblogs.com/fengff/p/9225859.html